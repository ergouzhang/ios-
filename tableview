在ViewController.storyborad中定义一个tableview，并拖入tableview cell。
新建一个tableview.swift扩展自UItableView类，关联tableview和tableview.swift，设置相应cell的deindentifier和label的tag值。

在swift中，编辑以下代码：

class table:UITableView,UITableViewDataSource       //继承自UITableVIew &UITableViewDataSource
{ 

var data=["  ","  ","  "]       //定义要显示的数组
required init?(coder aDecoder:NSCoder)    //tableview的初始化
{
super.init(coder:aDecoder)
self.dataSource=self
}


 func numberOfSectionInTableView(section:Int)->Int
{
return 1
}


func tableView(tableView:UItableView,cellForRowAtIndexPath indexPath:NSIndexPath)->UITableViewCell   //tableView的执行函数
{
var cell=tableView.dequeueReusableCellWithIdentifier("传入定义的cell的indentifier值")! as UITableViewCell   //获得cell值;此处的as转换无意义，前面类型已经是UITableViewCell类型，但此类型为optinal，需用！修饰确定。

var label=cell.viewWithTag(传入label 的tag值) as! UILabel       //获得label值;  as! 表示强制类型转换，若转换不成功则报错。as? 为不强制转换，若出错则返回nil。
lable.text=data[indexPath.row]     //传入数组参数

return cell
}

func tableView(tableView:UITableView,numberOfRowInSection section:Int)->Int
{return 3        //定义栏目数
}



}
——————－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
使用plist导入tableview     
  //  tableview首先调用numberOfSectionInTableView 获取section值，然后依据每个section，获取row的值，并初始化此tableview的格式，此时已有相应的section及row格。最后再依次将格子赋值。
   //相当于 初始化 section1&section2 ->建立section1里的row，建立section2里的row -> section1里的row1，2，3。。。赋值 ；section2里的row 1，2，3赋值。


新建plist文件，root设置为dictionary类型，并新建arry类型的label1，2，3及string类型的子项。

在tableView的.swift文件中：


class table:UITableView,UITableViewDataSource       //继承自UITableVIew &UITableViewDataSource
{ 

var data：NSDictionary！      //定义要显示的字典
required init?(coder aDecoder:NSCoder)    //tableview的初始化
{
super.init(coder:aDecoder)
self.dataSource=self
data=NSDictionary(contentsOfURL:NSBundle.mainBundle().URLForResource(“List”,withExtension:”plist”))   //将新建的list.plist赋给data

}


 func numberOfSectionInTableView(section:Int)->Int
{
return data.count   // .count 跟在dic类型后，表示计算dic类型入口的数目，即dic的key数。
}



func tableView(tableView:UITableView,numberOfRowInSection section:Int)->Int
{return  ( data.allValues[section] as! NSArray).count 	//.ount跟在arry后表示计算数组里的元素数；  
								//.allValues: 新建一个数组，包含data字典里的数据				

									

}


func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return data.allKeys[section] as! String           //.allKeys：新建一个数组，包含data字典里的key值
    }




func tableView(tableView:UItableView,cellForRowAtIndexPath indexPath:NSIndexPath)->UITableViewCell   
{
var cell=tableView.dequeueReusableCellWithIdentifier("传入定义的cell的indentifier值")! as UITableViewCell   
var label=cell.viewWithTag(传入label 的tag值) as! UILabel     
lable.text=(data.allValues[indexPath.section] as! NSArray).objectAtIndex(indexPath.row) as! String   //.objectAtIndex :返回某index的值

													  //

return cell
}




}


